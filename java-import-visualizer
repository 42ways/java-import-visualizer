#!/usr/bin/env python3
# 
# Copyright (c) 2022 Thomas Herrmann, 42ways GmbH
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# DISCLAIMER: This is a quick and dirty solution to create package and class dependency
#             diagrams for a given java source code base. It is based on a simply
#             parsing of the java source code, finding package and import statements
#             with pattern patching

import argparse
import os
import sys
import fnmatch
from pathlib import Path


class FileInfo:
    def __init__(self, package, class_name, dependencies):
        self.package = package
        self.class_name = class_name
        self.dependencies = dependencies

    def __str__(self):
        return f'{self.package}.{self.class_name}'


# TODO: This is way to complicated and redundant with other code in this file
def normalized_name(prefix_path, name=""):
    normalized = prefix_path.replace('.', '_')
    if len(name) > 0:
        normalized = normalized + "_" + name
    if not normalized.startswith('_'):
        normalized = "_" + normalized
    return normalized


def visualise_import_dependencies(args):
    with open(args.output, 'w') as output:
        try:
            output.writelines(
                ['@startuml\n\n',
                 '\' Generated by java-import-visualizer (https://github.com/42ways/java-import-visualizer)\n',
                 '\' Script was called like:\n',
                 '\' ', " ".join(sys.argv[:]), '\n',
                 '\n'
                 ])
            file_infos = []
            traverse_tree(args, file_infos)
            write_package_dict(output, create_package_dict_from_fileinfos(file_infos), "")
            if args.dependencies:
                create_and_write_dependencies(output, file_infos)
            output.writelines(['\nhide members\n',
                               '\n@enduml\n'])
        finally:
            output.close()


def write_package_dict(output, package_dict, name_prefix):
    if isinstance(package_dict, dict):
        for package_or_class in package_dict.keys():
            write_package_or_class(output, package_dict, name_prefix, package_or_class)
    else:
        output.write(f'\nclass {package_dict}\n')  # TODO: This would probably be an error


def write_package_or_class(output, package_dict, name_prefix, package_or_class_name):
    if isinstance(package_dict[package_or_class_name], FileInfo):
        write_class(output, name_prefix, package_dict[package_or_class_name])
    else:
        write_package(output, package_dict, name_prefix, package_or_class_name)


def write_class(output, name_prefix, fileinfo):
    prefixed_class_name = normalized_name(name_prefix, fileinfo.class_name)
    output.write(f'\nclass {prefixed_class_name} as "{fileinfo.class_name}"\n')


def write_package(output, package_dict, name_prefix, package):
    full_package_name = normalized_name(name_prefix, package)
    output.write(f'\npackage {full_package_name} as "{package}" ')
    output.write('{\n')
    write_package_dict(output, package_dict[package], full_package_name)
    output.write('\n}\n')


def add_to_packages(package_dict, package_list, fileinfo):
    if len(package_list) == 0:
        package_dict[fileinfo.class_name] = fileinfo
        return
    if not package_list[0] in package_dict:
        package_dict[package_list[0]] = {}
    add_to_packages(package_dict[package_list[0]], package_list[1:], fileinfo)


def create_package_dict_from_fileinfos(file_infos):
    package_dict = {}
    for fileinfo in file_infos:
        add_to_packages(package_dict, fileinfo.package.split("."), fileinfo)
    return package_dict


def get_package_name(javacode):
    for line in javacode:
        if line.startswith("package "):
            return line.removeprefix("package ").removesuffix(";\n")
    return 'UNKNOWN'


def get_import_names(javacode):
    imports = []
    for line in javacode:
        if line.startswith("import "):
            imports.append(line.removeprefix("import ").removesuffix(";\n"))
    return imports


def process_java_file(dir_path, filename):
    with open(os.path.join(dir_path, filename)) as f:
        java_code = f.readlines()
    return FileInfo(get_package_name(java_code), Path(filename).stem, get_import_names(java_code))


def traverse_tree(args, fileinfo):
    for dir_path, dir_names, filenames in os.walk(args.root.rstrip(os.path.sep)):
        if args.file_patterns:
            new_filenames = []
            for pattern in args.file_patterns:
                new_filenames.extend(fnmatch.filter(filenames, pattern))
            filenames = list(dict.fromkeys(new_filenames))
        for exclude in args.exclude_list:
            if exclude in dir_names:
                dir_names.remove(exclude)
            if exclude in filenames:
                filenames.remove(exclude)
        for file in filenames:
            fileinfo.append(process_java_file(dir_path, file))


def package_name(dep):
    last_dot_index = dep.rindex(".")
    if last_dot_index < 0:
        return dep
    else:
        return dep[:last_dot_index]


def write_dependencies(output, dependencies):
    for dep in dependencies.keys():
        for depends_on in dependencies[dep]:
            output.write(f'{normalized_name(dep)} --> {normalized_name(depends_on)}\n')


def create_and_write_dependencies(output, file_infos):
    package_dependencies = {}
    for fileinfo in file_infos:
        if not fileinfo.package in package_dependencies.keys():
            package_dependencies[fileinfo.package] = set()
        for dep in fileinfo.dependencies:
            package_dependencies[fileinfo.package].add(package_name(dep))
    write_dependencies(output, package_dependencies)


def main():
    parser = argparse.ArgumentParser(description='Find all Java-Files in a directory tree and create an PlantUML file '
                                                 'to visualize the import dependencies')
    parser.add_argument('root', default='.', nargs='?',
                        help='root directory of tree traversal (default ".")')
    parser.add_argument('-e', '--exclude', dest='exclude_list', metavar='dir', action='append',
                        default=[".git", ".idea", "buildSrc", "test", "module-info.java"],
                        help='exclude directory in traversal (may be specified more than once)')
    parser.add_argument('-p', '--pattern', dest='file_patterns', metavar='pattern', action='append', default=["*.java"],
                        help='print info only for files matching this pattern (may be specified more than once)')
    parser.add_argument('-d', '--dependencies', dest='dependencies', action='store_true',
                        help='show dependencies (imports) on package level')
    parser.add_argument('-o', '--output', dest='output', default='java-import-dependencies.puml', metavar='filename',
                        help='name of output file (default java-import-dependencies.puml)')
    parser.add_argument('--version', action='version', version='%(prog)s 0.1')
    args = parser.parse_args()
    visualise_import_dependencies(args)


if __name__ == '__main__':
    main()
